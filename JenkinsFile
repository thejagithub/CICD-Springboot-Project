pipeline {
  agent {
    docker {
          image 'thejadocker1425/maven-docker-agent:latest'
          args '-v /var/run/docker.sock:/var/run/docker.sock --user root'
        }
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'pwd'
        sh 'ls -la'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://13.231.70.244:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'SonarQube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "thejadocker1425/cicd-springboot:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "CICD-Springboot-project"
            GIT_USER_NAME = "thejagithub"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                sh '''
                    echo "Current directory:"
                    pwd
                    echo "Listing files:"
                    ls -la
                    cd $WORKSPACE
                     git config --global --add safe.directory $PWD
                    git config user.email "thejanaravindu2000@gmail.com"
                    git config user.name "thejagithub"
                    git checkout master
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" manifests/springboot-deployment.yml
                    git add manifests/springboot-deployment.yml
                    if git diff --cached --quiet; then
                      echo "No changes to commit."
                    else
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                    fi
                '''
            }
        }
    }
    stage('Reset Tag Placeholder') {
      environment {
        GIT_REPO_NAME = "CICD-Springboot-project"
        GIT_USER_NAME = "thejagithub"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            echo "Resetting image tag placeholder for next build..."
            git checkout master

            sed -i "s/${BUILD_NUMBER}/replaceImageTag/g" manifests/springboot-deployment.yml
            git add manifests/springboot-deployment.yml

            if git diff --cached --quiet; then
              echo "Nothing to reset."
            else
              git commit -m "Reset image tag placeholder for next build"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
            fi
          '''
        }
      }
    }  
  }
}
      