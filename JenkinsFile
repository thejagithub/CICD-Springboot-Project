pipeline {
  agent {
    docker {
      image 'thejadocker1425/maven-docker-agent:latest'
      args '-v /var/run/docker.sock:/var/run/docker.sock --user root'
    }
  }

  stages {

    stage('Debug Workspace') {
      steps {
        sh '''
          pwd
          ls -la
          if [ -d .git ]; then echo ".git directory found"; else echo ".git directory NOT found"; fi
        '''
      }
    }

    stage('Checkout') {
      steps {
        checkout scm
        sh 'pwd'
        sh 'ls -la'
      }
    }

    stage('Build and Test') {
      steps {
        sh 'mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://57.181.30.147:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'SonarQube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "thejadocker1425/cicd-springboot:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh 'docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "CICD-Springboot-Project"
        GIT_USER_NAME = "thejagithub"
      }
      steps {
        dir('/var/lib/jenkins/workspace/CI-CD-Pipeline'){
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            cd $WORKSPACE
            git config user.email "thejanaravindu2000@gmail.com"
            git config user.name "thejagithub"
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" CICD-Springboot-project/manifests/deployment.yml
            git add CICD-Springboot-project/manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
          '''
        }
      }
    }
  }
}
}
